import { NextRequest, NextResponse } from 'next/server';
import { detectBot, logBotDetection } from '@/utils/botDetection';
import { getBotRedirectConfig } from '@/utils/botRedirects';
import { telegramNotifier } from '@/utils/telegramEnhanced';
import { getLocationByIp } from '@/utils/geolocation';

export async function middleware(request: NextRequest) {
  const userAgent = request.headers.get('user-agent') || '';
  const accept = request.headers.get('accept') || '';
  const acceptLanguage = request.headers.get('accept-language') || '';
  const acceptEncoding = request.headers.get('accept-encoding') || '';
  const referer = request.headers.get('referer') || '';
  
  // –°–æ–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  const headers: Record<string, string> = {};
  request.headers.forEach((value, key) => {
    headers[key] = value;
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–µ–∫–ª–∞–º—ã Meta
  const isFromMetaAds = 
    referer.includes('facebook.com') || 
    referer.includes('instagram.com') || 
    referer.includes('whatsapp.com') ||
    referer.includes('telegram.me') ||
    referer.includes('t.me');
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª —Å —Ä–µ–∫–ª–∞–º—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (—ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
  if (isFromMetaAds) {
    console.log(`‚úÖ Allowing user from Meta ads: ${referer}`);
    return NextResponse.next();
  }
  
  // –ü–æ–ª—É—á–∞–µ–º IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const ip = (request.headers.get('x-forwarded-for') ?? '127.0.0.1').split(',')[0];
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ IP
  let language = 'en';
  try {
    const geo = await getLocationByIp(ip);
    language = geo.language || 'en';
    console.log('üåç Geo IP:', ip, 'Country:', geo.country_code, 'Language:', language);
  } catch (e) {
    // fallback
  }
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫—É —Å —è–∑—ã–∫–æ–º –≤—Å–µ–≥–¥–∞ (–¥–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å)
  const response = NextResponse.next();
  response.cookies.set('galaxy_wheel_language', language, { path: '/', maxAge: 60 * 60 * 24 * 30 });
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–æ—Ç–æ–≤
  const isDefinitelyHuman = 
    userAgent.includes('Mozilla/5.0') && 
    userAgent.includes('Chrome') && 
    accept.includes('text/html') && 
    acceptLanguage && 
    acceptEncoding;
  
  // –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ—á–Ω–æ —á–µ–ª–æ–≤–µ–∫ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  if (isDefinitelyHuman) {
    return response;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–π —É—Ç–∏–ª–∏—Ç—ã
  const botResult = detectBot(userAgent, headers);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
  logBotDetection(botResult, userAgent);
  
  // –ï—Å–ª–∏ —ç—Ç–æ –±–æ—Ç - —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º
  if (botResult.isBot) {
    const config = getBotRedirectConfig(botResult.botType);
    
    console.log(`üö´ Redirecting bot to: ${config.url}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –±–æ—Ç–µ
    const ip = (request.headers.get('x-forwarded-for') ?? '127.0.0.1').split(',')[0];
    telegramNotifier.sendBotDetectionNotification({
      userAgent,
      botType: botResult.botType || 'unknown',
      confidence: botResult.confidence,
      reasons: botResult.reasons,
      ip
    }).catch(error => {
      console.error('Failed to send bot notification:', error);
    });
    
    const response = NextResponse.redirect(config.url, {
      status: config.status as 301 | 302
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (config.headers) {
      Object.entries(config.headers as Record<string, string>).forEach(([key, value]) => {
        response.headers.set(key, value);
      });
    }
    
    return response;
  }
  
  // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
  return response;
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
}; 