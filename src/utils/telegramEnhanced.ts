import { NextResponse } from 'next/server';

// –¢–∏–ø—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export interface TelegramNotification {
  type: 'visit' | 'spin' | 'conversion' | 'error' | 'bot_detected' | 'analytics' | 'performance';
  userId: string;
  data?: any;
  timestamp?: number;
  priority?: 'low' | 'medium' | 'high' | 'critical';
}

export interface TelegramStats {
  totalVisits: number;
  totalSpins: number;
  totalConversions: number;
  uniqueUsers: number;
  topCountries: Array<{ country: string; count: number }>;
  topDevices: Array<{ device: string; count: number }>;
}

// –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
const EMOJIS = {
  visit: { new: 'üë§', returning: 'üö∂‚Äç‚ôÇÔ∏è' },
  spin: { win: 'üé∞', lose: 'üí∏' },
  conversion: 'üèÜ',
  error: '‚ùå',
  bot_detected: 'ü§ñ',
  analytics: 'üìä',
  performance: '‚ö°',
  warning: '‚ö†Ô∏è',
  success: '‚úÖ'
};

// –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è Telegram (HTML)
const COLORS = {
  success: '#00FF00',
  warning: '#FFA500',
  error: '#FF0000',
  info: '#0080FF',
  neutral: '#808080'
};

export class TelegramNotifier {
  private botToken: string;
  private chatId: string;
  private stats: TelegramStats;
  private messageQueue: TelegramNotification[] = [];
  private isProcessing = false;

  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN || '';
    this.chatId = process.env.TELEGRAM_CHAT_ID || '';
    this.stats = {
      totalVisits: 0,
      totalSpins: 0,
      totalConversions: 0,
      uniqueUsers: 0,
      topCountries: [],
      topDevices: []
    };
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  async sendMessage(message: string, options?: {
    parseMode?: 'Markdown' | 'HTML';
    disableWebPagePreview?: boolean;
    disableNotification?: boolean;
  }) {
    if (!this.botToken || !this.chatId) {
      console.error('Telegram configuration is missing');
      return { success: false, error: 'Configuration missing' };
    }

    const telegramUrl = `https://api.telegram.org/bot${this.botToken}/sendMessage`;

    try {
      const response = await fetch(telegramUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: this.chatId,
          text: message,
          parse_mode: options?.parseMode || 'Markdown',
          disable_web_page_preview: options?.disableWebPagePreview || true,
          disable_notification: options?.disableNotification || false
        })
      });

      const data = await response.json();
      return data.ok ? { success: true } : { success: false, error: data };
    } catch (error) {
      console.error('Telegram API error:', error);
      return { success: false, error: 'Network error' };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏
  async sendVisitNotification(data: {
    userId: string;
    isNew: boolean;
    ip: string;
    location?: { country: string; country_code: string };
    device: string;
    os: string;
    browser: string;
    userAgent: string;
    referrer?: string;
  }) {
    const emoji = data.isNew ? EMOJIS.visit.new : EMOJIS.visit.returning;
    const title = data.isNew ? 'New User Visit' : 'Returning User Visit';
    
    const message = `
${emoji} *${title}*

üë§ *User:* \`#user${data.userId}\`
üåç *Location:* ${data.location ? `${data.location.country} (${data.location.country_code})` : 'Unknown'}
üì± *Device:* ${data.device} / ${data.os} / ${data.browser}
üåê *IP:* \`${data.ip}\`
${data.referrer ? `üîó *Referrer:* ${data.referrer}` : ''}

‚è∞ *Time:* ${new Date().toLocaleString('ru-RU')}
    `.trim();

    return this.sendMessage(message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø–∏–Ω–∞—Ö
  async sendSpinNotification(data: {
    userId: string;
    result: any;
    ip: string;
    location?: { country: string; country_code: string };
    device: string;
    os: string;
    browser: string;
  }) {
    const isWin = data.result.amount > 0;
    const emoji = isWin ? EMOJIS.spin.win : EMOJIS.spin.lose;
    const title = isWin ? 'üé∞ Spin Win!' : 'üí∏ Spin Result';
    
    const message = `
${emoji} *${title}*

üë§ *User:* \`#user${data.userId}\`
üí∞ *Prize:* ${data.result.amount} ${data.result.currency}
üé´ *Promocode:* \`${data.result.promocode}\`
üåç *Location:* ${data.location ? `${data.location.country} (${data.location.country_code})` : 'Unknown'}
üì± *Device:* ${data.device} / ${data.os} / ${data.browser}
üåê *IP:* \`${data.ip}\`

‚è∞ *Time:* ${new Date().toLocaleString('ru-RU')}
    `.trim();

    return this.sendMessage(message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è—Ö
  async sendConversionNotification(data: {
    userId: string;
    result: any;
    ip: string;
    location?: { country: string; country_code: string };
    device: string;
    os: string;
    browser: string;
  }) {
    const message = `
${EMOJIS.conversion} *Conversion Event!*

üë§ *User:* \`#user${data.userId}\`
üí∞ *Prize:* ${data.result.amount} ${data.result.currency}
üé´ *Promocode:* \`${data.result.promocode}\`
üíµ *Local Prize:* ${data.result.localAmount}
üåç *Location:* ${data.location ? `${data.location.country} (${data.location.country_code})` : 'Unknown'}
üì± *Device:* ${data.device} / ${data.os} / ${data.browser}
üåê *IP:* \`${data.ip}\`

‚è∞ *Time:* ${new Date().toLocaleString('ru-RU')}
    `.trim();

    return this.sendMessage(message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–æ—Ç–µ
  async sendBotDetectionNotification(data: {
    userAgent: string;
    botType: string;
    confidence: number;
    reasons: string[];
    ip: string;
  }) {
    const message = `
${EMOJIS.bot_detected} *Bot Detected*

ü§ñ *Type:* ${data.botType}
üìä *Confidence:* ${data.confidence}%
üîç *Reasons:* ${data.reasons.join(', ')}
üåê *IP:* \`${data.ip}\`
üì± *User-Agent:* \`${data.userAgent.substring(0, 100)}...\`

‚è∞ *Time:* ${new Date().toLocaleString('ru-RU')}
    `.trim();

    return this.sendMessage(message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  async sendStatsNotification(stats: TelegramStats) {
    const message = `
${EMOJIS.analytics} *Daily Statistics*

üìä *Total Visits:* ${stats.totalVisits}
üé∞ *Total Spins:* ${stats.totalSpins}
üèÜ *Total Conversions:* ${stats.totalConversions}
üë• *Unique Users:* ${stats.uniqueUsers}

üåç *Top Countries:*
${stats.topCountries.slice(0, 5).map((country, index) => 
  `${index + 1}. ${country.country}: ${country.count}`
).join('\n')}

üì± *Top Devices:*
${stats.topDevices.slice(0, 5).map((device, index) => 
  `${index + 1}. ${device.device}: ${device.count}`
).join('\n')}

‚è∞ *Generated:* ${new Date().toLocaleString('ru-RU')}
    `.trim();

    return this.sendMessage(message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
  async sendErrorNotification(data: {
    error: string;
    context?: string;
    userId?: string;
    stack?: string;
  }) {
    const message = `
${EMOJIS.error} *Error Alert*

‚ùå *Error:* ${data.error}
${data.context ? `üìù *Context:* ${data.context}` : ''}
${data.userId ? `üë§ *User:* \`#user${data.userId}\`` : ''}
${data.stack ? `üîç *Stack:* \`${data.stack.substring(0, 200)}...\`` : ''}

‚è∞ *Time:* ${new Date().toLocaleString('ru-RU')}
    `.trim();

    return this.sendMessage(message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  async sendPerformanceNotification(data: {
    metric: string;
    value: number;
    threshold: number;
    userId?: string;
  }) {
    const isWarning = data.value > data.threshold;
    const emoji = isWarning ? EMOJIS.warning : EMOJIS.success;
    const title = isWarning ? 'Performance Warning' : 'Performance OK';

    const message = `
${emoji} *${title}*

üìä *Metric:* ${data.metric}
üìà *Value:* ${data.value}
üéØ *Threshold:* ${data.threshold}
${data.userId ? `üë§ *User:* \`#user${data.userId}\`` : ''}

‚è∞ *Time:* ${new Date().toLocaleString('ru-RU')}
    `.trim();

    return this.sendMessage(message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ HTML —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  async sendHTMLMessage(html: string, options?: { disableNotification?: boolean }) {
    return this.sendMessage(html, {
      parseMode: 'HTML',
      disableNotification: options?.disableNotification || false
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
  async sendInteractiveMessage(text: string, buttons: Array<Array<{ text: string; callback_data: string }>>) {
    if (!this.botToken || !this.chatId) {
      return { success: false, error: 'Configuration missing' };
    }

    const telegramUrl = `https://api.telegram.org/bot${this.botToken}/sendMessage`;

    try {
      const response = await fetch(telegramUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: this.chatId,
          text: text,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: buttons
          }
        })
      });

      const data = await response.json();
      return data.ok ? { success: true } : { success: false, error: data };
    } catch (error) {
      console.error('Telegram API error:', error);
      return { success: false, error: 'Network error' };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
  async sendPhoto(caption: string, photoUrl: string) {
    if (!this.botToken || !this.chatId) {
      return { success: false, error: 'Configuration missing' };
    }

    const telegramUrl = `https://api.telegram.org/bot${this.botToken}/sendPhoto`;

    try {
      const response = await fetch(telegramUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: this.chatId,
          photo: photoUrl,
          caption: caption,
          parse_mode: 'Markdown'
        })
      });

      const data = await response.json();
      return data.ok ? { success: true } : { success: false, error: data };
    } catch (error) {
      console.error('Telegram API error:', error);
      return { success: false, error: 'Network error' };
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  updateStats(type: 'visit' | 'spin' | 'conversion', data: any) {
    switch (type) {
      case 'visit':
        this.stats.totalVisits++;
        break;
      case 'spin':
        this.stats.totalSpins++;
        break;
      case 'conversion':
        this.stats.totalConversions++;
        break;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getStats(): TelegramStats {
    return { ...this.stats };
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  async sendDailyReport(data: {
    date: Date;
    totalVisits: number;
    totalSpins: number;
    conversionRate: number;
    topCountries: string[];
    revenue: string;
    newUsers?: number;
    returningUsers?: number;
  }) {
    const message = `
üìä *Daily Report - ${data.date.toLocaleDateString('ru-RU')}*

üìà *Key Metrics:*
‚Ä¢ Total Visits: ${data.totalVisits.toLocaleString()}
‚Ä¢ Total Spins: ${data.totalSpins.toLocaleString()}
‚Ä¢ Conversion Rate: ${data.conversionRate}%
‚Ä¢ Revenue: ${data.revenue}

üë• *Users:*
‚Ä¢ New Users: ${data.newUsers || 'N/A'}
‚Ä¢ Returning Users: ${data.returningUsers || 'N/A'}

üåç *Top Countries:*
${data.topCountries.map((country, index) => `${index + 1}. ${country}`).join('\n')}

üìÖ *Report Period:* ${data.date.toLocaleDateString('ru-RU')}
‚è∞ *Generated:* ${new Date().toLocaleString('ru-RU')}
    `.trim();

    return this.sendMessage(message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  async sendWeeklyReport(data: {
    week: string;
    growth: string;
    newUsers: number;
    topPerformers: string[];
    totalRevenue: string;
    avgConversionRate: number;
  }) {
    const message = `
üìà *Weekly Report - ${data.week}*

üìä *Performance:*
‚Ä¢ Growth: ${data.growth}
‚Ä¢ New Users: ${data.newUsers.toLocaleString()}
‚Ä¢ Total Revenue: ${data.totalRevenue}
‚Ä¢ Avg Conversion Rate: ${data.avgConversionRate}%

üèÜ *Top Performers:*
${data.topPerformers.map((user, index) => `${index + 1}. ${user}`).join('\n')}

üìÖ *Week:* ${data.week}
‚è∞ *Generated:* ${new Date().toLocaleString('ru-RU')}
    `.trim();

    return this.sendMessage(message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞
  async sendAlert(data: {
    type: 'high_conversion' | 'suspicious_activity' | 'system_error' | 'performance_issue';
    message: string;
    threshold?: number;
    current?: number;
    ip?: string;
    count?: number;
  }) {
    const emoji = data.type === 'high_conversion' ? 'üöÄ' : 
                  data.type === 'suspicious_activity' ? '‚ö†Ô∏è' : 
                  data.type === 'system_error' ? '‚ùå' : '‚ö°';
    
    const title = data.type === 'high_conversion' ? 'High Conversion Alert' :
                  data.type === 'suspicious_activity' ? 'Suspicious Activity Detected' :
                  data.type === 'system_error' ? 'System Error Alert' : 'Performance Issue';

    let details = '';
    if (data.threshold && data.current) {
      details = `\nüìä Threshold: ${data.threshold}%\nüìà Current: ${data.current}%`;
    }
    if (data.ip && data.count) {
      details = `\nüåê IP: \`${data.ip}\`\nüî¢ Count: ${data.count}`;
    }

    const message = `
${emoji} *${title}*

‚ö†Ô∏è *Alert:* ${data.message}${details}

‚è∞ *Time:* ${new Date().toLocaleString('ru-RU')}
    `.trim();

    return this.sendMessage(message);
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const telegramNotifier = new TelegramNotifier(); 